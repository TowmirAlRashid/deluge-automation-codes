// Problem 1: On Status Change of Lead to Contacted, Create Contact, Account and Deal, Link, Created Contact/Account to Deal and Link Create Account to Contact. Do not use ConvertLead Function, do it manually using Script.

// Description: 

// On Status change of Lead = "Contacted"
// Create Account
// Create Contact
// In Contact Link Account
// Create Deal
// In Deal Link Account and Contact
// Move all Activities of Lead to Deals.
// All Tasks
// All Meetings/Events
// All Calls
// All Notes
// All Attachments
// Delete the Lead.

// Solution to problem 1
leadResponse = zoho.crm.getRecordById("Leads",leadID);
// info leadResponse;
accountInfo = {"Account_Name":leadResponse.get("Full_Name"),"Account_Email":leadResponse.get("Email"),"Phone":leadResponse.get("Lead_Phone"),"Annual_Revenue":leadResponse.get("Annual_Revenue")};
// info accountInfo;
accountResponse = zoho.crm.createRecord("Accounts",accountInfo);
// account created
contactInfo = {"Last_Name":leadResponse.get("Last_Name"),"First_Name":leadResponse.get("First_Name"),"Account_Name":accountResponse.get("id"),"Email":leadResponse.get("Email"),"Phone":leadResponse.get("Lead_Phone")};
contactResponse = zoho.crm.createRecord("Contacts",contactInfo);
// contact created
dealInfo = {"Deal_Name":leadResponse.get("Full_Name"),"Account_Name":accountResponse.get("id"),"Contact_Name":contactResponse.get("id"),"Account_Phone":accountResponse.get("Phone")};
dealResponse = zoho.crm.createRecord("Deals",dealInfo);
// deal created
dealId = dealResponse.get("id");
notesInfo = zoho.crm.getRelatedRecords("Notes","Leads",leadID);
// notes received
notesList = List();
notesList.addAll(notesInfo);
// notes collected in a list for looping through
for each  noteElement in notesList
{
	note = Map();
	note.put("Note_Title",noteElement.get("Note_Title"));
	note.put("Note_Content",noteElement.get("Note_Content"));
	note.put("Parent_Id",dealId);
	note.put("$se_module","Deals");
	zoho.crm.createRecord("Notes",note);
	// notes added to the new deal
}
attachmentsInfo = zoho.crm.getRelatedRecords("Attachments","Leads",leadID);
// attachments received
attachmentsList = List();
attachmentsList.addAll(attachmentsInfo);
// attachments collected in a list for looping through
for each  attachment in attachmentsList
{
	attachmentId = attachment.get("id");
	downloadedAttachment = invokeurl
	[
		url :"https://www.zohoapis.com/crm/v2.1/Leads/" + leadID + "/Attachments/" + attachmentId
		type :GET
		connection:"zoho_test_crm_conn"
	];
	zoho.crm.attachFile("Deals",dealId,downloadedAttachment);
}
calls_info = zoho.crm.getRelatedRecords("Calls","Leads",leadID);
calls_list = List();
calls_list.addAll(calls_info);
for each  callElement in calls_list
{
	call = Map();
	call.put("Call_Start_Time",callElement.get("Call_Start_Time"));
	call.put("Call_Type",callElement.get("Call_Type"));
	call.put("Call_Purpose",callElement.get("Call_Purpose"));
	call.put("What_Id",dealId);
	call.put("$se_module","Deals");
	call.put("Call_Purpose",callElement.get("Call_Purpose"));
	call.put("Call_Status",callElement.get("Call_Status"));
	zoho.crm.createRecord("Calls",call);
	// calls pushed to the created deal
}
eventsInfo = zoho.crm.getRelatedRecords("Events","Leads",leadID);
events_list = List();
events_list.addAll(eventsInfo);
for each  eventElement in events_list
{
	event = Map();
	event.put("Start_DateTime",eventElement.get("Start_DateTime"));
	event.put("Event_Title",eventElement.get("Event_Title"));
	event.put("End_DateTime",eventElement.get("End_DateTime"));
	event.put("What_Id",dealId);
	event.put("$se_module","Deals");
	zoho.crm.createRecord("Events",event);
	// meetings pushed to the created deal
}
tasksInfo = zoho.crm.getRelatedRecords("Tasks","Leads",leadID);
tasks_list = List();
tasks_list.addAll(tasksInfo);
for each  taskElement in tasks_list
{
	task = Map();
	task.put("Subject",taskElement.get("Subject"));
	task.put("What_Id",dealId);
	task.put("$se_module","Deals");
	task.put("Status",taskElement.get("Status"));
	task.put("Priority",taskElement.get("Priority"));
	task.put("Send_Notification_Email",taskElement.get("Send_Notification_Email"));
	task.put("Due_Date",taskElement.get("Due_Date"));
	zoho.crm.createRecord("Tasks",task);
	// tasks pushed to the created deal
}
// delete the deal
deleteRecordMap = Map();
deleteRecordMap = {"module":"Leads","id":leadID};
zoho.crm.invokeConnector("crm.delete",deleteRecordMap);




// Problem 2: Deal is Closed Won
// Send Email to Deal Owner, Account Owner, Contact Owner, Contact Email, Account Email. (If same email exits for multiple owner, send only one.)
// Using Workflow with Template
// Using Sendmail
// Using Send Mail Rest API V2.1

// solution to Problem 2
dealResponse = zoho.crm.getRecordById("Deals",dealId);
emails_list = List();
emails_list.add(dealResponse.get("Owner").get("email"));
// deal owner email collected
accountResponse = zoho.crm.getRecordById("Accounts",dealResponse.get("Account_Name").get("id"));
emails_list.add(accountResponse.get("Account_Email"));
// account email collected
emails_list.add(accountResponse.get("Owner").get("email"));
// account owner collected
contactResponse = zoho.crm.getRecordById("Contacts",dealResponse.get("Contact_Name").get("id"));
emails_list.add(contactResponse.get("Email"));
// contact email collected
emails_list.add(contactResponse.get("Owner").get("email"));
// contact owner collected
emails_list = emails_list.distinct();
for each  email in emails_list
{
	if(email != null)
	{
		data = {"data":{{"from":{"user_name": dealResponse.get("Deal_Name"),"email":zoho.adminuserid},"to":{{"email":email}},"subject":"The deal is Closed Won!","template":{"id":4728790000006456686}}}};
		response = invokeurl
		[
			url :"https://www.zohoapis.com/crm/v2.1/Deals/"+dealId+"/actions/send_mail"
			type : POST
			connection: "zoho_test_crm_conn"
			parameters: data.toString()
		];
		info response;
	}
}


// problem 3: Create a Date Time Field in CRM Module where Records are above 2000 and Bulk Update the Date Time Field with Current Date Time.

// Create Min 2000 Data in any Module
// Create a Date Time Field.
// Create a Button in Utility Menu, on click, it will update that Date Time Filed when it is clicked.

// solution to problem 3
update_list = List();
result = 0;
page_no = 0;
limit = 200;
array = ".".leftPad(10).toList("");
for each  position in array
{
	leads_response = zoho.crm.getRecords("Leads", page_no, limit);
	info leads_response.size();
	for each item in leads_response
	{
		update_list.add({"id":item.get("id"),"Update_Current_Date":now.toString("yyyy-MM-dd'T'HH:mm:ss") + "+06:00"});
		if(update_list.size() == 100)
		{
			info zoho.crm.bulkUpdate("Leads",update_list);
			update_list = list();
			result += 100;
		}
	}
	page_no = page_no + 1;
}
if(update_list.size() > 0)
{
	zoho.crm.bulkUpdate("Leads",update_list);
}
// return "Updated " + result + " Lead records with the current Date-Time!";


// problem 4: Rename Deal Name, on this Format Deal-0001

// On Create Deal Name Format : Deal-0001


// solution to problem 4
deals = zoho.crm.getRecords("Deals");

update_list = List();
deal_index = 1;
for each deal in deals
{
	dealName = "Deal-" + deal_index.toString().leftPad(4).replaceAll(" ", "0");
	info dealName;
	update_list.add({ "id": deal.get("id"), "Deal_Name": dealName });
	deal_index += 1;
}

zoho.crm.bulkUpdate("Deals", update_list) ;